View(ax)
save(ax, file= "l1000-drugsInfo.RData")
#axtop <- as.data.frame(head(ax, 40))
ax <- as.data.frame(ax)
a <- read.csv("drugs_with_ids.csv")
a1 <- a[!is.na(a$CMAP.drugid),]
a1 <- a1[!is.na(a1$inchikey),]
a1 <- a1[a1$inchikey!="",]
a1$CMAP.drugid <- gsub(badchars,"",a1$CMAP.drugid)
a1$CMAP.drugid <- toupper(a1$CMAP.drugid)
cmapRes <- read.xlsx2("res200.xlsx")
cmapDrgNames <- gsub(badchars,"", cmapRes$name)
cmapDrgNames <- toupper(cmapDrgNames)
##find these in the cmap drug id column of the a matrix
ind2 <-  a1$CMAP.drugid %in% cmapDrgNames # 25
inchikeys <- a1[ind2,]$inchikey
cmapRes <- read.xlsx2("res200.xlsx", 1)
cmapRes <- head(cmapRes, 40)
cmapDrgNames <- gsub(badchars,"", cmapRes$name)
cmapDrgNames <- toupper(cmapDrgNames)
ind2 <-  a1$CMAP.drugid %in% cmapDrgNames # 25
inchikeys <- a1[ind2,]$inchikey
ind3 <- ax$inchikey %in% inchikeys
sum(ind3) #15
ax[ind3, ]$pert_iname
cmapRes <- read.xlsx2("res200.xlsx", 1)
cmapRes <- head(cmapRes, 40)
View(cmapRes)
cmapDrgNames <- gsub(badchars,"", cmapRes$X.)
cmapDrgNames <- toupper(cmapDrgNames)
ind2 <-  a1$CMAP.drugid %in% cmapDrgNames # 25
inchikeys <- a1[ind2,]$inchikey
length(ind2)
sum(ind2)
inchikeys <- a1[ind2,]$inchikey
# > setdiff(cmapDrgNames, a1[ind2,]$CMAP.drugid)
# [1] "5152487"      "01983060000"  "5286656"      "PF0053974500" "5248896"      "PNU0293363"
ind3 <- ax$inchikey %in% inchikeys
sum(ind3) #15
ax[ind3, ]$pert_iname
View(ax[ind3,]$pert_iname)
ind3 <- ax$inchikey %in% inchikeys
sum(ind3) #15
ax[ind3, ]$pert_iname
View(ax[ind3, ])
rm(list=ls())
source('./RCode/preprocessInput.R')
source('./RCode/sensitivityData.R')
source('./RCode/perturbationData.R')
source('./RCode/structureData.R')
source('./RCode/constStructureLayer.R')
source('./RCode/constSensitivityLayer.R')
source('./RCode/constPerturbationLayer.R')
source('./RCode/integrateStrctSensPert.R')
source('./RCode/drugTargetBench.R')
source('./RCode/generateDrugPairs.R')
source('./RCode/compConcordIndx.R')
source('./RCode/generateRocPlot.R')
source('./RCode/predPerf.R')
source('./RCode/ATCBench.R')
source('./RCode/communityGen.R')
library(PharmacoGx)
library(apcluster)
library(rcdk)
library(fingerprint)
library(annotate)
library(org.Hs.eg.db)
library(SNFtool)
library(ROCR)
library(survcomp)
library(reshape2)
library(proxy)
library(apcluster)
badchars <- "[\xb5]|[\n]|[,]|[;]|[:]|[-]|[+]|[*]|[%]|[$]|[#]|[{]|[}]|[[]|[]]|[|]|[\\^]|[/]|[\\]|[.]|[_]|[ ]"
## creating the output directory if not exists
#outputDir <- paste(getwd(), "/outputDir", sep="")
if ( ! file.exists("Output")) {
dir.create("Output")
}
# Find common drugs between CTRPV2 and LINCS dataset
cDrugs <- preprocessInput(dname="ctrpv2", "lincs")
dim(cDrugs)  ##239 X 28
# Process Sensitivity, Perturbation, and Structure layers for set of common drugs
sensData <- sensitivityData("ctrpv2", cDrugs)  ## 645 X 239
dim(sensData)
pertData <- perturbationData("lincs", cDrugs)  ## 978 X 237
dim(pertData)
strcData <- structureData("lincs", cDrugs)  ## a vector  --> 239 elemnts
length(strcData)
## Get the common drugs (237) among the 3 datasets/layers
commonDrugs <- Reduce(intersect,list(sort(names(strcData)),sort(colnames(sensData)),
sort(colnames(pertData))))
length(commonDrugs) ##237
strcData<- strcData[commonDrugs] # 237 drugs
sensData <- sensData[,commonDrugs] # 645 x 237 drugs
pertData<- pertData[,commonDrugs] #978 genes x 237
## network layer construction and integration by SNF
strcAffMat <- constStructureLayer(strcData)
sensAffMat <- constSensitivityLayer(sensData)
pertAffMat <- constPerturbationLayer(pertData)
integrtStrctSensPert <- integrateStrctSensPert(sensAffMat, strcAffMat, pertAffMat)
save(integrtStrctSensPert, file="Data/ctrpv2-Integrated.RData")
## 1- DRUG-TARGET
## loading and cleaning benchmark dataset
dataBench <- drugTargetBench("ctrpv", commonDrugs) # 139 x 139 drug-drug adjacency matrix
## intersecting the SNF layers (ie, SNF adjacency matrix of each layer and the integration) with the benchmark
## Returns: list of 5 containing scores of drug-drug pairs for each of the layers and the integration and the benchmark
pairs <- generateDrugPairs(dataBench, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combiantion layer vs. a single layer (e.g., structure)
res <- compConcordIndx(pairs, "structure")
paste("c.index, combination of layers (integrative method): ", res$c1$c.index)
paste("c.index, structure layer only: ", res$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs, d1Name="ctrpv2", d2Name="lincs", benchNam="drug-target")
cDrugs<-as.data.frame(commonDrugs)
names(cDrugs)<-"pert_iname"
## 2- CHMEMBL -> ATC
## loading and cleaning benchmark dataset
dataBench2 <- ATCBench("chembl", cDrugs)
dim(dataBench2) ##[1] 43 43
pairs2 <- generateDrugPairs(dataBench2, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
res2 <- compConcordIndx(pairs2, "structure")
paste("c.index, combination of layers (integrative method): ", res2$c1$c.index)
paste("c.index, structure layer only: ", res2$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs2, d1Name="ctrpv2", d2Name="lincs", benchNam="ATC(CHEMBL)")
## generate communities
load("Output/gmt_targ_ctrpv.RData")
communityGen(integrtStrctSensPert, "ctrpv2", GMT_TARG)
getwd()
setwd("drugSNF/")
source('./RCode/preprocessInput.R')
source('./RCode/sensitivityData.R')
source('./RCode/perturbationData.R')
source('./RCode/structureData.R')
source('./RCode/constStructureLayer.R')
source('./RCode/constSensitivityLayer.R')
source('./RCode/constPerturbationLayer.R')
source('./RCode/integrateStrctSensPert.R')
source('./RCode/drugTargetBench.R')
source('./RCode/generateDrugPairs.R')
source('./RCode/compConcordIndx.R')
source('./RCode/generateRocPlot.R')
source('./RCode/predPerf.R')
source('./RCode/ATCBench.R')
source('./RCode/communityGen.R')
library(PharmacoGx)
library(apcluster)
library(rcdk)
library(fingerprint)
library(annotate)
library(org.Hs.eg.db)
library(SNFtool)
library(ROCR)
library(survcomp)
library(reshape2)
library(proxy)
library(apcluster)
badchars <- "[\xb5]|[\n]|[,]|[;]|[:]|[-]|[+]|[*]|[%]|[$]|[#]|[{]|[}]|[[]|[]]|[|]|[\\^]|[/]|[\\]|[.]|[_]|[ ]"
## creating the output directory if not exists
#outputDir <- paste(getwd(), "/outputDir", sep="")
if ( ! file.exists("Output")) {
dir.create("Output")
}
# Find common drugs between CTRPV2 and LINCS dataset
cDrugs <- preprocessInput(dname="ctrpv2", "lincs")
dim(cDrugs)  ##239 X 28
# Process Sensitivity, Perturbation, and Structure layers for set of common drugs
sensData <- sensitivityData("ctrpv2", cDrugs)  ## 645 X 239
dim(sensData)
pertData <- perturbationData("lincs", cDrugs)  ## 978 X 237
dim(pertData)
strcData <- structureData("lincs", cDrugs)  ## a vector  --> 239 elemnts
length(strcData)
## Get the common drugs (237) among the 3 datasets/layers
commonDrugs <- Reduce(intersect,list(sort(names(strcData)),sort(colnames(sensData)),
sort(colnames(pertData))))
length(commonDrugs) ##237
strcData<- strcData[commonDrugs] # 237 drugs
sensData <- sensData[,commonDrugs] # 645 x 237 drugs
pertData<- pertData[,commonDrugs] #978 genes x 237
## network layer construction and integration by SNF
strcAffMat <- constStructureLayer(strcData)
sensAffMat <- constSensitivityLayer(sensData)
pertAffMat <- constPerturbationLayer(pertData)
integrtStrctSensPert <- integrateStrctSensPert(sensAffMat, strcAffMat, pertAffMat)
save(integrtStrctSensPert, file="Data/ctrpv2-Integrated.RData")
## 1- DRUG-TARGET
## loading and cleaning benchmark dataset
dataBench <- drugTargetBench("ctrpv", commonDrugs) # 139 x 139 drug-drug adjacency matrix
## intersecting the SNF layers (ie, SNF adjacency matrix of each layer and the integration) with the benchmark
## Returns: list of 5 containing scores of drug-drug pairs for each of the layers and the integration and the benchmark
pairs <- generateDrugPairs(dataBench, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combiantion layer vs. a single layer (e.g., structure)
res <- compConcordIndx(pairs, "structure")
paste("c.index, combination of layers (integrative method): ", res$c1$c.index)
paste("c.index, structure layer only: ", res$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs, d1Name="ctrpv2", d2Name="lincs", benchNam="drug-target")
cDrugs<-as.data.frame(commonDrugs)
names(cDrugs)<-"pert_iname"
## 2- CHMEMBL -> ATC
## loading and cleaning benchmark dataset
dataBench2 <- ATCBench("chembl", cDrugs)
dim(dataBench2) ##[1] 43 43
pairs2 <- generateDrugPairs(dataBench2, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
res2 <- compConcordIndx(pairs2, "structure")
paste("c.index, combination of layers (integrative method): ", res2$c1$c.index)
paste("c.index, structure layer only: ", res2$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs2, d1Name="ctrpv2", d2Name="lincs", benchNam="ATC(CHEMBL)")
## generate communities
load("Output/gmt_targ_ctrpv.RData")
communityGen(integrtStrctSensPert, "ctrpv2", GMT_TARG)
## The code assumes that the working directory is "drugSNF" folder
rm(list=ls())
source('./RCode/preprocessInput.R')
source('./RCode/sensitivityData.R')
source('./RCode/perturbationData.R')
source('./RCode/structureData.R')
source('./RCode/constStructureLayer.R')
source('./RCode/constSensitivityLayer.R')
source('./RCode/constPerturbationLayer.R')
source('./RCode/integrateStrctSensPert.R')
source('./RCode/drugTargetBench.R')
source('./RCode/ATCBench.R')
source('./RCode/generateDrugPairs.R')
source('./RCode/compConcordIndx.R')
source('./RCode/generateRocPlot.R')
source('./RCode/predPerf.R')
source('./RCode/communityGen.R')
library(PharmacoGx)
library(apcluster)
library(rcdk)
library(fingerprint)
library(annotate)
library(org.Hs.eg.db)
library(SNFtool)
library(ROCR)
library(survcomp)
library(reshape2)
library(proxy)
badchars <- "[\xb5]|[\n]|[,]|[;]|[:]|[-]|[+]|[*]|[%]|[$]|[#]|[{]|[}]|[[]|[]]|[|]|[\\^]|[/]|[\\]|[.]|[_]|[ ]"
## creating the output directory if not exists
if ( ! file.exists("Output")) {
dir.create("Output")
}
cDrugs <- preprocessInput(dname="nci60", "lincs")
dim(cDrugs$lincsboth)  ##  238 X 28
dim(cDrugs$nciboth)  ##  238 X 66
## loading and cleaning data for the layers
sensData <- sensitivityData("nci60", cDrugs$nciboth)
dim(sensData)  ##[1]  60 238
pertData <- perturbationData("lincs", cDrugs$lincsboth)
dim(pertData)  ##[1] 978 237
strcData <- structureData("lincs", cDrugs$lincsboth)  ## a vector
length(strcData) ## 238
#Reduce All Matrices to lowest common set of drugs across all 3
# Get 237 drugs now in the reduced sets
commonDrugs <- Reduce(intersect,list(sort(names(strcData)),sort(colnames(sensData)),
sort(colnames(pertData))))
##Reduce the data to the set of common drugs across the three layers
strcData<- strcData[commonDrugs]
sensData <- sensData[,commonDrugs]
pertData <- pertData[,commonDrugs]
## filter out cDrugs$lincsboth "dataframe" as well accordingly
cDrugs$lincsboth <- cDrugs$lincsboth[cDrugs$lincsboth$pert_iname %in% commonDrugs, ]
#Sanity Checks
if (ncol(sensData) != ncol(pertData)) stop(sprintf("error!"))
if (ncol(sensData) !=length(strcData)) stop(sprintf("error!"))
if (all(colnames(pertData) != colnames(sensData))) stop(sprintf("error!"))
if (all(colnames(pertData) != names(strcData))) stop(sprintf("error!"))
## network layer construction and integration by SNF
strcAffMat <- constStructureLayer(strcData)
sensAffMat <- constSensitivityLayer(sensData)
pertAffMat <- constPerturbationLayer(pertData)
integrtStrctSensPert <- integrateStrctSensPert(sensAffMat, strcAffMat, pertAffMat)
save(integrtStrctSensPert, file="Data/nci60-Integrated.RData")
# Sanity Check - should all have the same dimensions: 237 X 237
dim(strcAffMat)
dim(sensAffMat)
dim(pertAffMat)
dim(integrtStrctSensPert)
## USING 3 DIFFERENT BENCHMARK SETS TO EVALUATE ###
## 1- CHMEMBL -> DRUG-TARGET
## loading and cleaning benchmark dataset
dataBench1 <- drugTargetBench("chembl", commonDrugs)
dim(dataBench1) ##[1] 72 72
pairs1 <- generateDrugPairs(dataBench1, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
res1 <- compConcordIndx(pairs1, "structure")
paste("c.index, combination of layers (integrative method): ", res1$c1$c.index)
paste("c.index, structure layer only: ", res1$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs1, d1Name="nci60", d2Name="lincs", benchNam="drug-target(CHEMBL)-Zscore")
## 2- CHMEMBL -> ATC
## loading and cleaning benchmark dataset
dataBench2 <- ATCBench("chembl", cDrugs$lincsboth)
dim(dataBench2) ##[1] 87 87
pairs2 <- generateDrugPairs(dataBench2, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
res2 <- compConcordIndx(pairs2, "structure")
paste("c.index, combination of layers (integrative method): ", res2$c1$c.index)
paste("c.index, structure layer only: ", res2$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs2, d1Name="nci60", d2Name="lincs", benchNam="ATC(CHEMBL)-Zscore")
## 3- STITICH -> DRUG-TARGET
## loading and cleaning benchmark dataset
# dataBench3 <- drugTargetBench("stitch", cDrugs$lincsboth)
# dim(dataBench3)  ##[1] 60 60
# pairs3 <- generateDrugPairs(dataBench3, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
# ## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
# res3 <- compConcordIndx(pairs3, "structure")
# paste("c.index, combination of layers (integrative method): ", res3$c1$c.index)
# paste("c.index, structure layer only: ", res3$c2$c.index)
# ## validation: 2) ROC plots
# generateRocPlot(pairs3, d1Name="nci60", d2Name="lincs", benchNam="drug-target(STITCH)-Zscore")
## generate communities
load("Output/gmt_targ_chembl.RData")
communityGen(integrtStrctSensPert, "nci60", GMT_TARG)
rm(list=ls())
source('./RCode/preprocessInput.R')
source('./RCode/sensitivityData.R')
source('./RCode/perturbationData.R')
source('./RCode/structureData.R')
source('./RCode/constStructureLayer.R')
source('./RCode/constSensitivityLayer.R')
source('./RCode/constPerturbationLayer.R')
source('./RCode/integrateStrctSensPert.R')
source('./RCode/drugTargetBench.R')
source('./RCode/ATCBench.R')
source('./RCode/generateDrugPairs.R')
source('./RCode/compConcordIndx.R')
source('./RCode/generateRocPlot.R')
source('./RCode/predPerf.R')
source('./RCode/communityGen.R')
library(PharmacoGx)
library(apcluster)
library(rcdk)
library(fingerprint)
library(annotate)
library(org.Hs.eg.db)
library(SNFtool)
library(ROCR)
library(survcomp)
library(reshape2)
library(proxy)
badchars <- "[\xb5]|[\n]|[,]|[;]|[:]|[-]|[+]|[*]|[%]|[$]|[#]|[{]|[}]|[[]|[]]|[|]|[\\^]|[/]|[\\]|[.]|[_]|[ ]"
## creating the output directory if not exists
if ( ! file.exists("Output")) {
dir.create("Output")
}
cDrugs <- preprocessInput(dname="nci60", "lincs")
dim(cDrugs$lincsboth)  ##  238 X 28
dim(cDrugs$nciboth)  ##  238 X 66
## loading and cleaning data for the layers
sensData <- sensitivityData("nci60", cDrugs$nciboth)
dim(sensData)  ##[1]  60 238
pertData <- perturbationData("lincs", cDrugs$lincsboth)
dim(pertData)  ##[1] 978 237
strcData <- structureData("lincs", cDrugs$lincsboth)  ## a vector
length(strcData) ## 238
#Reduce All Matrices to lowest common set of drugs across all 3
# Get 237 drugs now in the reduced sets
commonDrugs <- Reduce(intersect,list(sort(names(strcData)),sort(colnames(sensData)),
sort(colnames(pertData))))
##Reduce the data to the set of common drugs across the three layers
strcData<- strcData[commonDrugs]
sensData <- sensData[,commonDrugs]
pertData <- pertData[,commonDrugs]
## filter out cDrugs$lincsboth "dataframe" as well accordingly
cDrugs$lincsboth <- cDrugs$lincsboth[cDrugs$lincsboth$pert_iname %in% commonDrugs, ]
#Sanity Checks
if (ncol(sensData) != ncol(pertData)) stop(sprintf("error!"))
if (ncol(sensData) !=length(strcData)) stop(sprintf("error!"))
if (all(colnames(pertData) != colnames(sensData))) stop(sprintf("error!"))
if (all(colnames(pertData) != names(strcData))) stop(sprintf("error!"))
## network layer construction and integration by SNF
strcAffMat <- constStructureLayer(strcData)
sensAffMat <- constSensitivityLayer(sensData)
pertAffMat <- constPerturbationLayer(pertData)
integrtStrctSensPert <- integrateStrctSensPert(sensAffMat, strcAffMat, pertAffMat)
save(integrtStrctSensPert, file="Data/nci60-Integrated.RData")
# Sanity Check - should all have the same dimensions: 237 X 237
dim(strcAffMat)
dim(sensAffMat)
dim(pertAffMat)
dim(integrtStrctSensPert)
## USING 3 DIFFERENT BENCHMARK SETS TO EVALUATE ###
## 1- CHMEMBL -> DRUG-TARGET
## loading and cleaning benchmark dataset
dataBench1 <- drugTargetBench("chembl", commonDrugs)
dim(dataBench1) ##[1] 72 72
pairs1 <- generateDrugPairs(dataBench1, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
res1 <- compConcordIndx(pairs1, "structure")
paste("c.index, combination of layers (integrative method): ", res1$c1$c.index)
paste("c.index, structure layer only: ", res1$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs1, d1Name="nci60", d2Name="lincs", benchNam="drug-target(CHEMBL)-Zscore")
## 2- CHMEMBL -> ATC
## loading and cleaning benchmark dataset
dataBench2 <- ATCBench("chembl", cDrugs$lincsboth)
dim(dataBench2) ##[1] 87 87
pairs2 <- generateDrugPairs(dataBench2, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
res2 <- compConcordIndx(pairs2, "structure")
paste("c.index, combination of layers (integrative method): ", res2$c1$c.index)
paste("c.index, structure layer only: ", res2$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs2, d1Name="nci60", d2Name="lincs", benchNam="ATC(CHEMBL)-Zscore")
## 3- STITICH -> DRUG-TARGET
## loading and cleaning benchmark dataset
# dataBench3 <- drugTargetBench("stitch", cDrugs$lincsboth)
# dim(dataBench3)  ##[1] 60 60
# pairs3 <- generateDrugPairs(dataBench3, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
# ## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
# res3 <- compConcordIndx(pairs3, "structure")
# paste("c.index, combination of layers (integrative method): ", res3$c1$c.index)
# paste("c.index, structure layer only: ", res3$c2$c.index)
# ## validation: 2) ROC plots
# generateRocPlot(pairs3, d1Name="nci60", d2Name="lincs", benchNam="drug-target(STITCH)-Zscore")
## generate communities
load("Output/gmt_targ_chembl.RData")
communityGen(integrtStrctSensPert, "nci60", GMT_TARG)
rm(list=ls())
source('./RCode/preprocessInput.R')
source('./RCode/sensitivityData.R')
source('./RCode/perturbationData.R')
source('./RCode/structureData.R')
source('./RCode/constStructureLayer.R')
source('./RCode/constSensitivityLayer.R')
source('./RCode/constPerturbationLayer.R')
source('./RCode/integrateStrctSensPert.R')
source('./RCode/drugTargetBench.R')
source('./RCode/generateDrugPairs.R')
source('./RCode/compConcordIndx.R')
source('./RCode/generateRocPlot.R')
source('./RCode/predPerf.R')
source('./RCode/ATCBench.R')
source('./RCode/communityGen.R')
library(PharmacoGx)
library(apcluster)
library(rcdk)
library(fingerprint)
library(annotate)
library(org.Hs.eg.db)
library(SNFtool)
library(ROCR)
library(survcomp)
library(reshape2)
library(proxy)
library(apcluster)
badchars <- "[\xb5]|[\n]|[,]|[;]|[:]|[-]|[+]|[*]|[%]|[$]|[#]|[{]|[}]|[[]|[]]|[|]|[\\^]|[/]|[\\]|[.]|[_]|[ ]"
## creating the output directory if not exists
#outputDir <- paste(getwd(), "/outputDir", sep="")
if ( ! file.exists("Output")) {
dir.create("Output")
}
# Find common drugs between CTRPV2 and LINCS dataset
cDrugs <- preprocessInput(dname="ctrpv2", "lincs")
dim(cDrugs)  ##239 X 28
# Process Sensitivity, Perturbation, and Structure layers for set of common drugs
sensData <- sensitivityData("ctrpv2", cDrugs)  ## 645 X 239
dim(sensData)
pertData <- perturbationData("lincs", cDrugs)  ## 978 X 237
dim(pertData)
strcData <- structureData("lincs", cDrugs)  ## a vector  --> 239 elemnts
length(strcData)
## Get the common drugs (237) among the 3 datasets/layers
commonDrugs <- Reduce(intersect,list(sort(names(strcData)),sort(colnames(sensData)),
sort(colnames(pertData))))
length(commonDrugs) ##237
strcData<- strcData[commonDrugs] # 237 drugs
sensData <- sensData[,commonDrugs] # 645 x 237 drugs
pertData<- pertData[,commonDrugs] #978 genes x 237
## network layer construction and integration by SNF
strcAffMat <- constStructureLayer(strcData)
sensAffMat <- constSensitivityLayer(sensData)
pertAffMat <- constPerturbationLayer(pertData)
integrtStrctSensPert <- integrateStrctSensPert(sensAffMat, strcAffMat, pertAffMat)
save(integrtStrctSensPert, file="Data/ctrpv2-Integrated.RData")
## 1- DRUG-TARGET
## loading and cleaning benchmark dataset
dataBench <- drugTargetBench("ctrpv", commonDrugs) # 139 x 139 drug-drug adjacency matrix
## intersecting the SNF layers (ie, SNF adjacency matrix of each layer and the integration) with the benchmark
## Returns: list of 5 containing scores of drug-drug pairs for each of the layers and the integration and the benchmark
pairs <- generateDrugPairs(dataBench, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combiantion layer vs. a single layer (e.g., structure)
res <- compConcordIndx(pairs, "structure")
paste("c.index, combination of layers (integrative method): ", res$c1$c.index)
paste("c.index, structure layer only: ", res$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs, d1Name="ctrpv2", d2Name="lincs", benchNam="drug-target")
cDrugs<-as.data.frame(commonDrugs)
names(cDrugs)<-"pert_iname"
## 2- CHMEMBL -> ATC
## loading and cleaning benchmark dataset
dataBench2 <- ATCBench("chembl", cDrugs)
dim(dataBench2) ##[1] 43 43
pairs2 <- generateDrugPairs(dataBench2, strcAffMat, sensAffMat, pertAffMat, integrtStrctSensPert)
## validation: 1) compare cindices of combination layer vs. a single layer (e.g., structure)
res2 <- compConcordIndx(pairs2, "structure")
paste("c.index, combination of layers (integrative method): ", res2$c1$c.index)
paste("c.index, structure layer only: ", res2$c2$c.index)
## validation: 2) ROC plots
generateRocPlot(pairs2, d1Name="ctrpv2", d2Name="lincs", benchNam="ATC(CHEMBL)")
## generate communities
load("Output/gmt_targ_ctrpv.RData")
communityGen(integrtStrctSensPert, "ctrpv2", GMT_TARG)
